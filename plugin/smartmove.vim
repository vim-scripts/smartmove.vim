" This file is autogenerated. DO NOT EDIT. Changes will be lost.
" Generator: vxlib/plugin.py
"if vxlib#plugin#StopLoading('_plugin_autogen_0b32af:f5fb')
"   finish
"endif

let s:exception_list = []

function! s:StrHas(ftrlist)
 let ftrs=split(a:ftrlist, ',')
 let hftrs=[]
 for f in ftrs
  call add(hftrs, (has(f) ? '+' : '-') . f)
 endfo
 return join(hftrs, ' ')
endfunc
function! s:MkPluginName(name)
 let name=substitute(a:name, '[^a-zA-Z0-9_]\+', '_', 'g') 
 let name=substitute(name, '_\+', '_', 'g') 
 let name=substitute(name, '^_\+\|_\+$', '', 'g') 
 return name
endfunc

function! s:Exception(throwpoint, exception, plugid, loadstatus)
 if a:loadstatus != 0
  call s:SetLoaded(a:plugid, a:loadstatus)
 endif
 call add(s:exception_list, matchstr(a:throwpoint, ',\s*\zsline\s\+\d\+') . ' (' . a:plugid . '):')
 call add(s:exception_list, '   ' . a:exception)
endfunc

function! s:CheckSetting(name, default)
 if !exists(a:name)
  exec 'let ' . a:name . '=' . a:default
 endif
endfunc

function! s:IsEnabled(name)
 if !exists('g:loaded_' . a:name) | return 1 | endif
 exec 'let ldval=g:loaded_' . a:name
 return ldval >= 0
endfunc

function! s:GetLoadStatus(name)
 if !exists('g:loaded_' . a:name) | return 0 | endif
 exec 'let ldval=g:loaded_' . a:name
 return ldval > 0
endfunc

function! s:SetLoaded(name, value)
 exec 'let g:loaded_' . a:name . '=' . a:value
endfunc

function! s:SetEnabledDefault(name, value)
 if s:GetLoadStatus(a:name) != 0 | return | endif
 if a:value | call s:SetLoaded(a:name, 0)
 else call s:SetLoaded(a:name, 1)
 endif
endfunc

function! s:ContinueLoading(name)
 if ! s:IsEnabled(a:name) | call s:SetLoaded(a:name, -1)
 elseif ! s:GetLoadStatus(a:name) | return 1
 endif
 return 0
endfunc

" ================================
" Source: autoload/smartmove.vim
" START Plugin
let s:curplugin=s:MkPluginName('smartmove#nexthelptag')
if s:ContinueLoading(s:curplugin)
 try        
  augroup smartmoveNextHelpTag
   autocmd!
   autocmd FileType help call smartmove#InstallNextHelpTag()
  augroup END

  call s:SetLoaded(s:curplugin, 1)
 catch /.*/
  call s:Exception(v:throwpoint, v:exception, s:curplugin, -9)
 endtry
endif
" END Plugin

" ================================
" Source: autoload/smartmove.vim
" START Plugin
let s:curplugin=s:MkPluginName('smartmove#smartscreen')
if s:ContinueLoading(s:curplugin)
 try        
  function s:SmartMove_MapSmartScreen(mode, keytop, keybottom)
   let postfix = "<CR>"
   if a:mode == "n" | let prefix = " :call "
    " elseif a:mode == "i" | let prefix = " <C-r>="
   elseif a:mode == "v"
    let prefix = " :<C-u>exec 'normal! gv'<bar>call "
    let postfix = "<CR><bar>msgv's"
   else
    return
   endif
   exec a:mode . "map <silent> " . a:keytop . prefix . "smartmove#SmartScreenTop(v:count)" . postfix
   exec a:mode . "map <silent> " . a:keybottom . prefix . "smartmove#SmartScreenBottom(v:count)" . postfix
  endfunction
  call s:SmartMove_MapSmartScreen('n', 'H', 'L')
  call s:SmartMove_MapSmartScreen('v', 'H', 'L')
  delfunction s:SmartMove_MapSmartScreen

  call s:SetLoaded(s:curplugin, 1)
 catch /.*/
  call s:Exception(v:throwpoint, v:exception, s:curplugin, -9)
 endtry
endif
" END Plugin

" ================================
for err in s:exception_list
 echoerr err
endfor
let s:exception_list = []
